-- Lsyncd configuration
-- Generated by zynesis/lsyncd-aws-autoscaling
-- on {{app.generation_time}}

settings = {
    logfile = "{{lsyncd.log_file}}",
    statusFile = "{{lsyncd.status_file}}",
    nodaemon = true
}


local rsyncpostcmd = {

        -- based on default rsyncssh.
        default.rsyncssh,

        -- for this config it is important to keep maxProcesses at 1, so
        -- the postcmds will only be spawned after the rsync completed
        maxProcesses = 1,

        -- called whenever something is to be done
        action = function(inlet)
                local event = inlet.getEvent()
                local config = inlet.getConfig()
                -- if the event is a blanket event and not the startup,
                -- its there to spawn the webservice restart at the target.
                if event.etype == "Blanket" then
                        -- uses rawget to test if "isPostcmd" has been set without
                        -- triggering an error if not.
                        local isPostcmd = rawget(event, "isPostcmd")
                        if isPostcmd then
                                spawn(event,
									config.ssh.binary,
									config.ssh._computed,
                                    config.host, 
									config.postcmd
								)	

                        return
                        else
                    -- this is the startup, forwards it to default routine.
                    return default.rsyncssh.action(inlet)
                end
                        error("this should never be reached")
                end
                -- ONLY do a postcommand after files have been modified.
				if event.etype == "Modify" then
					local sync = inlet.createBlanketEvent()
					sync.isPostcmd = true
				end
                -- the original event is simply forwarded to the normal action handler
                return default.rsyncssh.action(inlet)
        end,

        -- called when a process exited.
        -- this can be a rsync command, the startup rsync or the postcmd
        collect = function(agent, exitcode)
                -- for the ssh commands 255 is network error -> try again
                local isPostcmd = rawget(agent, "isPostcmd")
                if not agent.isList and agent.etype == "Blanket" and isPostcmd then
                        if exitcode == 255 then
                                return "again"
                        end
                        return
                else
                        --- everything else, forward to default collection handler
                        return default.collect(agent,exitcode)
                end
                error("this should never be reached")
        end,

        -- called before anything else
        -- builds the target from host and targetdir
        prepare = function(config)
                if not config.host then
                        error("rsyncpostcmd neets 'host' configured", 4)
                end
                if not config.targetdir then
                        error("rsyncpostcmd needs 'targetdir' configured", 4)
                end
                return default.rsyncssh.prepare(config, 1)
        end
}


{{#slaves}}
sync {
    rsyncpostcmd,
	delay = {{lsyncd.delay}},
	source = "{{lsyncd.source}}",
    host = "{{lsyncd.ssh_user}}@{{private_ip_address}}",
    excludeFrom = "{{lsyncd.exclude_file}}",
    targetdir = "{{lsyncd.target_dir}}",
    rsync = {
     archive = true,
     compress = false,
     whole_file = false
    },
	ssh = {
       identityFile = "{{lsyncd.ssh_private_key}}",
       options = {
          StrictHostKeyChecking = "no",
          User = "{{lsyncd.ssh_user}}"
        }
    },
	postcmd = '{{lsyncd.postcmd}}'
}
	
{{/slaves}}




